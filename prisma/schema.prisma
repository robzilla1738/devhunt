// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  website       String?
  twitter       String?
  github        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  projects       Project[]
  comments       Comment[]
  votes          Vote[]
  forumPosts     ForumPost[]
  forumComments  ForumComment[]
  forumVotes     ForumVote[]
  newsComments   NewsComment[]
  newsVotes      NewsVote[]
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  tagline     String
  website     String?
  github      String?
  thumbnail   String?
  images      String?
  tags        String?
  status      String   @default("development") // development, beta, launched
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    Vote[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  forumPosts  ForumPost[]
}

model ForumPost {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  categoryId String

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       ForumCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  forumComments  ForumComment[]
  forumVotes     ForumVote[]

  @@index([userId])
  @@index([categoryId])
}

model ForumComment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  forumPostId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  forumPost ForumPost @relation(fields: [forumPostId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([forumPostId])
}

model ForumVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  forumPostId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  forumPost ForumPost @relation(fields: [forumPostId], references: [id], onDelete: Cascade)

  @@unique([userId, forumPostId])
  @@index([userId])
  @@index([forumPostId])
}

model NewsPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  newsComments NewsComment[]
  newsVotes    NewsVote[]
}

model NewsComment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  newsPostId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsPost NewsPost @relation(fields: [newsPostId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([newsPostId])
}

model NewsVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  newsPostId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsPost NewsPost @relation(fields: [newsPostId], references: [id], onDelete: Cascade)

  @@unique([userId, newsPostId])
  @@index([userId])
  @@index([newsPostId])
}
